## 
## DAO - SERVICIO ANDROID 
## 
/**
  ${className}
  ${projectName}

  Created by Generator on 19/01/12.
  Copyright (c) 2012 Mobivery. All rights reserved.
  Version: ${version}
*/
package ${packagename}.model.dao;

import org.json.JSONException;
import org.json.JSONObject;
#foreach ($import in $extraImports)
${import}
#end
import ${packagename}.model.dto.*; 

/**
 * DAO de la entidad ${daoClassName}, Singleton
 */
public final class ${daoClassName}
{
	// Constantes para la lectura de campos de los XML
#foreach ($field in $baseFields)
	private static final String CONSTANT_${field.name.toUpperCase()}="${field.name}";	
#end
#foreach ($field in $baseArrayFields)
	private static final String CONSTANT_${field.name.toUpperCase()}="${field.name}";	
#end
#foreach ($field in $objectFields)
	private static final String CONSTANT_${field.name.toUpperCase()}="${field.name}";	
#end
#foreach ($field in $objectArrayFields)
	private static final String CONSTANT_${field.name.toUpperCase()}="${field.name}";	
#end
	


	/**
	 * Instancia privada del singleton
	 */
	private static ${daoClassName} instance=new ${daoClassName}();
	/**
	 * Constructor privado para prevenir instanciaci√≥n de objetos
	 */
	private ${daoClassName}()
	{
		
	}
	/**
	 * Obtiene la instancia del dao
	 * @returns Instancia del DAO
	 */
	public static ${daoClassName} getInstance()
	{
		return instance;
	}
	/**
	 * Construye un objeto del tipo ${className} a partir del
	 * JSON del mismo.
	 */
	public ${className} create(JSONObject value) throws JSONException
	{
		${className} returnValue=new ${className}();
		
		#foreach ($field in $baseFields)
		#if(${field.typeJava}=="Long")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
			returnValue.set${field.nameUcase}(Long.parseLong(String.valueOf(value.get(CONSTANT_${field.name.toUpperCase()}))));
		}
		#end
		#if(${field.typeJava}=="Integer")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		if(value.get(CONSTANT_${field.name.toUpperCase()}).getClass()==String.class)
		{
			returnValue.set${field.nameUcase}(Integer.parseInt((String)value.get(CONSTANT_${field.name.toUpperCase()})));	
		}
		else
		{
		returnValue.set${field.nameUcase}((${field.typeJava})value.get(CONSTANT_${field.name.toUpperCase()}));
		}
		}	
		#end
		#if(${field.typeJava}=="Float")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		if(value.get(CONSTANT_${field.name.toUpperCase()}).getClass()==String.class)
		{
			returnValue.set${field.nameUcase}(Float.parseFloat((String)value.get(CONSTANT_${field.name.toUpperCase()})));	
		}
		else
		{
		returnValue.set${field.nameUcase}((${field.typeJava})value.get(CONSTANT_${field.name.toUpperCase()}));
		}
		}	
		#end
		#if(${field.typeJava}=="Double")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{		
			returnValue.set${field.nameUcase}(Double.valueOf(String.valueOf(value.get(CONSTANT_${field.name.toUpperCase()}))));			
		}	
		#end
		#if(${field.typeJava}=="Boolean")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		if(value.get(CONSTANT_${field.name.toUpperCase()}).getClass()==String.class)
		{
			returnValue.set${field.nameUcase}(Boolean.parseBoolean((String)value.get(CONSTANT_${field.name.toUpperCase()})));	
		}
		else
		{
		returnValue.set${field.nameUcase}((${field.typeJava})value.get(CONSTANT_${field.name.toUpperCase()}));
		}
		}	
		#end		
		#if(${field.typeJava}=="String")
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		returnValue.set${field.nameUcase}((${field.typeJava})value.get(CONSTANT_${field.name.toUpperCase()}));
		}
		#end
		#end
	
		#foreach ($field in $baseArrayFields)
		ArrayList<${field.javaBaseTypeSingular}> ${field.javaName}List=new ArrayList<${field.javaBaseTypeSingular}>();
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		JSONArray ${field.name}Array=value.getJSONArray(CONSTANT_${field.name.toUpperCase()});
		for(int i=0;i!=${field.name}Array.length();i++)
		{
			#if(${field.javaBaseTypeSingular}=="String")
			${field.javaName}List.add(${field.name}Array.get(i).toString());
			#end
		}
		}
		returnValue.set${field.nameUcase}(${field.javaName}List);
		#end
	
		#foreach ($field in $objectFields)
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
		${field.typeJava} ${field.javaName}=${field.typeJavaDAO}.getInstance().create((JSONObject)value.get(CONSTANT_${field.name.toUpperCase()}));
		returnValue.set${field.nameUcase}(${field.javaName});
		}
		#end
	
		#foreach ($field in $objectArrayFields)
		ArrayList<${field.baseTypeSingular}> ${field.javaName}List=new ArrayList<${field.baseTypeSingular}>();
		if(value.has(CONSTANT_${field.name.toUpperCase()}) && !value.get(CONSTANT_${field.name.toUpperCase()}).toString().equals("null") )
		{
			if(value.get(CONSTANT_${field.name.toUpperCase()}) instanceof JSONArray)
			{
				JSONArray ${field.javaName}Array=(JSONArray)value.get(CONSTANT_${field.name.toUpperCase()});
				for(int i=0;i!=${field.javaName}Array.length();i++)
				{
					JSONObject obj=(JSONObject)${field.javaName}Array.get(i);
					${field.javaName}List.add(${field.typeJavaDAO}.getInstance().create(obj));
				}
			}
			else
			{
				${field.javaName}List.add(${field.typeJavaDAO}.getInstance().create((JSONObject)value.get(CONSTANT_${field.name.toUpperCase()})));
			}
		}
		returnValue.set${field.nameUcase}(${field.javaName}List);
		#end
		
		return returnValue;
	}
	
	/**
	 * Construye un JSONObject partiendo de un DTO
	 */
	public JSONObject serialize(${className} object) throws JSONException {		
		JSONObject returnValue = new JSONObject();
		
#foreach ($field in $baseFields)
		if(object.get${field.nameUcase}()!=null)
		{		
			returnValue.put("${field.name}", (object.get${field.nameUcase}() == null)? JSONObject.NULL : object.get${field.nameUcase}());
		}
#end
#foreach ($field in $baseArrayFields)
		if(object.get${field.nameUcase}()!=null)
		{
			returnValue.put("${field.name}",new JSONArray(object.get${field.nameUcase}()));
		}	
#end
#foreach ($field in $objectFields)
		if(object.get${field.nameUcase}()!=null)
		{
			returnValue.put("${field.name}",${field.typeJavaDAO}.getInstance().serialize(object.get${field.nameUcase}()));
		}
#end
#foreach ($field in $objectArrayFields)
		if(object.get${field.nameUcase}()!=null)
		{
		JSONArray ${field.name}Array = new JSONArray();
		for (${field.baseTypeSingular} ${field.javaName}Object : object.get${field.nameUcase}()) {
			${field.name}Array.put(${field.typeJavaDAO}.getInstance().serialize(${field.javaName}Object));
		}
		returnValue.put("${field.name}",${field.name}Array);
		}
#end

		return returnValue;
	}
}