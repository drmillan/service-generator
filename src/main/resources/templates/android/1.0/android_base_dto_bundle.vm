package ${packagename}.model.dto.base;
import java.util.List;
import java.util.ArrayList;
import android.os.Parcel;
import android.os.Parcelable;
import ${packagename}.model.dto.*;

/**
 * Version:${version}
 */
public class ${projectName}DTOBundle
{
#foreach($dto in $dtos)
	/**
	 * DTO que define la clase ${dto.name}
	 */
	public static class Base${dto.name} implements Parcelable
	{
		public Base${dto.name}(Parcel in) {
			readFromParcel(in);
		}
	
		public Base${dto.name}() {
		}
	
		#foreach ($field in $dto.fields) 
		// ${field.comment}
		private ${field.typeJava} ${field.javaName}; 
		#end	
		
		// Setters y Getters
		
		#foreach ($field in $dto.fields) 
		/**
		 * Setter de la propiedad ${field.javaName} , ${field.comment}
		 * @param ${field.javaName} valor a establecer en el set
		 */
		public void set${field.nameUcase}(${field.typeJava} ${field.javaName})
		{
			this.${field.javaName}=${field.javaName};
		}
		/**
		 * Getter de la propiedad ${field.javaName} , ${field.comment}
		 * @returns Valor de la propiedad ${field.javaName}
		 */
		public ${field.typeJava} get${field.nameUcase}()
		{
			return ${field.javaName};
		}
		#end
		
		@Override
		public int describeContents() {
			return 0;
		}

		@Override
		public void writeToParcel(Parcel dest, int flags) {
#foreach ($field in $dto.baseFields)		
#if(${field.typeJava}=="String")
			dest.writeString(${field.javaName});
#elseif(${field.typeJava}=="Long")
			dest.writeLong(${field.javaName});
#elseif(${field.typeJava}=="Integer")
			dest.writeInt(${field.javaName});
#elseif(${field.typeJava}=="Double")
			dest.writeDouble(${field.javaName});
#elseif(${field.typeJava}=="Boolean")
			dest.writeByte((byte)((${field.javaName} != null && ${field.javaName})? 1:0));
#elseif(${field.typeJava}=="Float")
			dest.writeFloat(${field.javaName});
#end
#end
#foreach ($field in $dto.baseArrayFields)
			dest.writeList(${field.javaName});
#end
#foreach ($field in $dto.objectFields)
			dest.writeParcelable(${field.javaName}, flags);
#end
#foreach ($field in $dto.objectArrayFields)
			dest.writeTypedList(${field.javaName});
#end
		}
		
		public void readFromParcel(Parcel in) {
#foreach ($field in $dto.baseFields)		
#if(${field.typeJava}=="String")
			${field.javaName} = in.readString();
#elseif(${field.typeJava}=="Long")
			${field.javaName} = in.readLong();
#elseif(${field.typeJava}=="Integer")
			${field.javaName} = in.readInt();
#elseif(${field.typeJava}=="Double")
			${field.javaName} = in.readDouble();
#elseif(${field.typeJava}=="Boolean")
			${field.javaName} = in.readByte() == 1;
#elseif(${field.typeJava}=="Float")
			${field.javaName} = in.readFloat();
#end
#end
#foreach ($field in $dto.baseArrayFields)
			${field.javaName} = new ArrayList<${field.javaBaseTypeSingular}>(); 
			in.readList(${field.javaName}, ${field.javaBaseTypeSingular}.class.getClassLoader());
#end
#foreach ($field in $dto.objectFields)
			${field.javaName} = in.readParcelable(${field.baseTypeSingular}.class.getClassLoader());
#end
#foreach ($field in $dto.objectArrayFields)
			${field.javaName} = new ArrayList<${field.baseTypeSingular}>();
			in.readTypedList(${field.javaName}, ${field.baseTypeSingular}.CREATOR);
#end		
		}
		
		public static final Parcelable.Creator<Base${dto.name}> CREATOR =
			new Parcelable.Creator<Base${dto.name}>() {
				public Base${dto.name} createFromParcel(Parcel in) {
					return new Base${dto.name}(in);
				}
				public Base${dto.name}[] newArray(int size) {
					return new Base${dto.name}[size];
				}
			};
			
	}
#end
}