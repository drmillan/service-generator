//
//  ${className}.m
//  ${projectName}
//  Version: ${version}
//
//  Created by Mobivery
//  Copyright (c) 2012 Mobivery. All rights reserved.
//

#import "Base${serviceName}Logic.h"

#foreach ($extraImport in $extraImports)
#import "${extraImport}.h"
#end
#import "MVYDefines.h"
#import "${projectName}Helper.h"


@implementation Base${serviceName}Logic


#foreach ($message in $messages) 
	
	/**
	 * MŽtodo ${message.method}JSON: ${message.description}
	 * @param ${message.request.javaInstanceName} Petici—n al servicio
	 * @returns NSDictionary Respuesta del servidor
	 */
	
	-(NSDictionary *) ${message.method}JSON:(${message.request.type} *)${message.request.javaInstanceName} onError:(NSError *__autoreleasing *)inError
	{
		NSString *url=@"${message.url}";
		
		url=[[${projectName}Helper sharedInstance] preInjectURLParameters:url withObject:${message.request.javaInstanceName}];
		#foreach($field in $message.request.fields)
		
			#if(${field.type} == "Boolean")
				NSString *string${field.nameUcase}=[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}.boolValue ? @"true": @"false"];  
			#else
				NSString *string${field.nameUcase}=[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}];  
			#end
		
		#end
		
		#foreach($field in $message.inURLbutNotField)
			#ifdef $field
				url=[url stringByReplacingOccurrencesOfString:@"${${field}}" withString:${field}];
			#endif
		#end
		#foreach($field in $message.request.fields)
        url=[url stringByReplacingOccurrencesOfString:@"${${field.name}}" withString:string${field.nameUcase}];
  		#end
  		
  		url=[[${projectName}Helper sharedInstance] postInjectURLParameters:url withObject:${message.request.javaInstanceName}];
  		
  		_ModelGenLog(@"URL: %@", url);  		
  		
		NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];
		#foreach($field in $message.request.fields)
		[dict setValue:[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}] forKey:@"${field.name}"];       
		#end
		double time=[[NSDate date] timeIntervalSince1970];
        [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
    
    	NSString *escapedUrl = [[${projectName}Helper sharedInstance] escapeUrl:url];
	    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:escapedUrl] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60.0];
		
		NSError *error;	
#if(${message.type}=='Post')
		
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"POST"];
		
#end		
#if(${message.type}=='Put')
		
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"PUT"];
		
#end		
#if(${message.type}=='Delete')
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"DELETE"];
		
#end				
#if(${message.type}=='PostJSON')
  
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"POST"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='DeleteJSON')
			    
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"DELETE"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='PutJSON')
			    
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"PUT"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='Get')
		[request setHTTPMethod:@"GET"];
		
#end
#if(${message.isHttps()})
	    
		self.receivedData = [[NSMutableData alloc] init];
        NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];

        [connection start];
        
        self.downloadComplete = NO;
        self.error = nil;
        
        NSRunLoop *theRL = [NSRunLoop currentRunLoop];
        while (!self.downloadComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);
        
	    if(!self.error) {

	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:self.receivedData options:kNilOptions error:&error];
	        return json;
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",self.error);
	    	if (inError) {
	    		*inError = self.error;
	    	}
	    	return nil;
	    }
		    
#else
  	
		NSURLResponse *response = nil;
  		NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
	    if(!error) {
	     
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
	        return json;
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",error);
	    	if (inError) {
	    		*inError=error;
	    	}
	    	return nil;
	    }
  		
#end
	    
	}
	
	
	/**
	 * MŽtodo ${message.method}: ${message.description}
	 * @param ${message.request.javaInstanceName} Petici—n al servicio
	 * @returns ${message.response.type} Respuesta del servidor
	 */
	-(${message.response.type} *) ${message.method}:(${message.request.type} *)${message.request.javaInstanceName} onError:(NSError *__autoreleasing *)inError
	{
		NSString *url=@"${message.url}";
		
		url=[[${projectName}Helper sharedInstance] preInjectURLParameters:url withObject:${message.request.javaInstanceName}];
		#foreach($field in $message.request.fields)
			#if(${field.type} == "Boolean")
				NSString *string${field.nameUcase}=[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}.boolValue ? @"true": @"false"];  
			#else
				NSString *string${field.nameUcase}=[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}];  
			#end
		#end
		
		#foreach($field in $message.inURLbutNotField)
			#ifdef $field
				url=[url stringByReplacingOccurrencesOfString:@"${${field}}" withString:${field}];
			#endif
		#end
		#foreach($field in $message.request.fields)
        url=[url stringByReplacingOccurrencesOfString:@"${${field.name}}" withString:string${field.nameUcase}];
  		#end
  		
  		url=[[${projectName}Helper sharedInstance] postInjectURLParameters:url  withObject:${message.request.javaInstanceName}];
  		
  		_ModelGenLog(@"URL: %@", url);
  		
		NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];
		#foreach($field in $message.request.fields)
		[dict setValue:[NSString stringWithFormat:@"%@",${message.request.javaInstanceName}.${field.name}] forKey:@"${field.name}"];       
		#end
		double time=[[NSDate date] timeIntervalSince1970];
        [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
        
		
		${message.response.name} *result;
    
    	NSError *error;
    	NSString *escapedUrl = [[${projectName}Helper sharedInstance] escapeUrl:url];
	    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:escapedUrl] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60.0];
				
#if(${message.type}=='Post')
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"POST"];
#end		
#if(${message.type}=='Put')
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"PUT"];
#end		
#if(${message.type}=='Delete')
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"DELETE"];
#end					
#if(${message.type}=='PostJSON')
			    
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"POST"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='DeleteJSON')
			    
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	  
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"DELETE"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='PutJSON')
			    
	    NSDictionary *jsonDict=[[${message.request.typeIOSDAO} sharedInstance] writeToDictionary:${message.request.javaInstanceName}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"PUT"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

#end
#if(${message.type}=='Get')
		[request setHTTPMethod:@"GET"];
#end
#if(${message.isHttps()})
	    
		self.receivedData = [[NSMutableData alloc] init];
        NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];

        [connection start];
        
        self.downloadComplete = NO;
        self.error = nil;
        
        NSRunLoop *theRL = [NSRunLoop currentRunLoop];
        while (!self.downloadComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);
        
	    if(!self.error) {
			NSString *stringData = [[NSString alloc] initWithData:self.receivedData encoding:NSUTF8StringEncoding];
			stringData =[[${projectName}Helper sharedInstance] preprocessResponse:stringData];
			[self.receivedData setData:[stringData dataUsingEncoding:NSUTF8StringEncoding]];
	    	
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:self.receivedData options:kNilOptions error:&error];
	        _ModelGenLog(@"JSON: %@",json);
	        result = [[${message.response.typeIOSDAO} sharedInstance] readFromDictionary:json];
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",self.error);
	    	if (inError) {
	    		*inError = self.error;
	    	}
	    	return nil;
	    }
#else
  			
  		NSURLResponse *response = nil;
  		NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];
  		
  		NSString *stringData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
  		stringData =[[${projectName}Helper sharedInstance] preprocessResponse:stringData];
  		data = [stringData dataUsingEncoding:NSUTF8StringEncoding];
  		
	    if(!error) {
	    
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
	        _ModelGenLog(@"JSON: %@",json);
	        result = [[${message.response.typeIOSDAO} sharedInstance] readFromDictionary:json];
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",error);
	    	if (inError) {
	    		*inError=error;
	    	}
	    	return nil;
	    }
  		
#end		
		return result;
		
	}

#end

#pragma mark Ð Metodos heredados de NSURLConnectionDelegate

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
    
    return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust])
            [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
    
    [challenge.sender continueWithoutCredentialForAuthenticationChallenge:challenge];
}


- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    
    self.receivedData = nil;
    
    NSLog(@"Connection failed! Error - %@ %@",
          [error localizedDescription],
          [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);
    
    self.error = error;
    self.downloadComplete = YES;
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    
    [self.receivedData setLength:0];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    
    [self.receivedData appendData:data];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    
    self.downloadComplete = YES;
    
}

@end

 