/**
  {{{className}}}
  {{{projectName}}}

  Created by Generator
  Copyright (c) 2012 Mobivery. All rights reserved.
  Version: {{{version}}}
*/
package {{{packagename}}}.model.dao;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.List;
import java.util.ArrayList;
import {{{packagename}}}.model.dto.*; 

/**
 * DAO de la entidad {{{entity.daoClassName}}}, Singleton
 */
public final class {{{entity.daoClassName}}}
{
	// Constantes para la lectura de campos de los XML
	{{#entity.baseFields}}
	private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
	{{/entity.baseFields}}
	{{#entity.baseArrayFields}}
	private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
	{{/entity.baseArrayFields}}
	{{#entity.objectFields}}
	private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
	{{/entity.objectFields}}
	{{#entity.objectArrayFields}}
	private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
	{{/entity.objectArrayFields}}
	


	/**
	 * Instancia privada del singleton
	 */
	private static {{{entity.daoClassName}}} instance=new {{{entity.daoClassName}}}();
	/**
	 * Constructor privado para prevenir instanciaci√≥n de objetos
	 */
	private {{{entity.daoClassName}}}()
	{
		
	}
	/**
	 * Obtiene la instancia del dao
	 * @returns Instancia del DAO
	 */
	public static {{{entity.daoClassName}}} getInstance()
	{
		return instance;
	}
	/**
	 * Construye un objeto del tipo {{{entity.name}}} a partir del
	 * JSON del mismo.
	 */
	public {{{entity.name}}} create(JSONObject value) throws JSONException
	{
		{{{entity.name}}} returnValue=new {{{entity.name}}}();
		
		{{#entity.baseFields}}
		{{#isLong}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
			returnValue.set{{{nameUcase}}}(Long.parseLong(String.valueOf(value.get(CONSTANT_{{nameFullUcase}}))));
		}
		{{/isLong}}
		{{#isInteger}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		if(value.get(CONSTANT_{{nameFullUcase}}).getClass()==String.class)
		{
			returnValue.set{{{nameUcase}}}(Integer.parseInt((String)value.get(CONSTANT_{{nameFullUcase}})));	
		}
		else
		{
		returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
		}
		}	
		{{/isInteger}}
		{{#isFloat}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		if(value.get(CONSTANT_{{nameFullUcase}}}).getClass()==String.class)
		{
			returnValue.set{{{nameUcase}}}(Float.parseFloat((String)value.get(CONSTANT_{{nameFullUcase}})));	
		}
		else
		{
		returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
		}
		}	
		{{/isFloat}}
		{{#isDouble}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{		
			returnValue.set{{{nameUcase}}}(Double.valueOf(String.valueOf(value.get(CONSTANT_{{nameFullUcase}}))));			
		}	
		{{/isDouble}}
		{{#isBoolean}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		if(value.get(CONSTANT_{{nameFullUcase}}).getClass()==String.class)
		{
			returnValue.set{{{nameUcase}}}(Boolean.parseBoolean((String)value.get(CONSTANT_{{nameFullUcase}})));	
		}
		else
		{
		returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
		}
		}	
		{{/isBoolean}}		
		{{#isString}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
		}
		{{/isString}}
		{{/entity.baseFields}}
	
		{{#entity.baseArrayFields}}
		ArrayList<{{{baseTypeSingular}}}> {{{javaName}}}List=new ArrayList<{{{baseTypeSingular}}}>();
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		JSONArray {{{name}}}Array=value.getJSONArray(CONSTANT_{{nameFullUcase}});
		for(int i=0;i!={{{name}}}Array.length();i++)
		{
				{{#isString}}
				{{{javaName}}}List.add({{{name}}}Array.get(i).toString());
				{{/isString}}
		}
		}
		returnValue.set{{{nameUcase}}}({{{javaName}}}List);
		{{/entity.baseArrayFields}}
	
		{{#entity.objectFields}}
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
		{{{typeJava}}} {{{javaName}}}={{{typeJavaDAO}}}.getInstance().create((JSONObject)value.get(CONSTANT_{{nameFullUcase}}));
		returnValue.set{{{nameUcase}}}({{{javaName}}});
		}
		{{/entity.objectFields}}
	
		{{#entity.objectArrayFields}}
		ArrayList<{{{baseTypeSingular}}}> {{{javaName}}}List=new ArrayList<{{{baseTypeSingular}}}>();
		if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
		{
			if(value.get(CONSTANT_{{nameFullUcase}}) instanceof JSONArray)
			{
				JSONArray {{{javaName}}}Array=(JSONArray)value.get(CONSTANT_{{nameFullUcase}});
				for(int i=0;i!={{{javaName}}}Array.length();i++)
				{
					JSONObject obj=(JSONObject){{{javaName}}}Array.get(i);
					{{{javaName}}}List.add({{{typeJavaDAO}}}.getInstance().create(obj));
				}
			}
			else
			{
				{{{javaName}}}List.add({{{typeJavaDAO}}}.getInstance().create((JSONObject)value.get(CONSTANT_{{nameFullUcase}})));
			}
		}
		returnValue.set{{{nameUcase}}}({{{javaName}}}List);
		{{/entity.objectArrayFields}}
		
		return returnValue;
	}
	
	/**
	 * Construye un JSONObject partiendo de un DTO
	 */
	public JSONObject serialize({{{entity.name}}} object) throws JSONException {		
		JSONObject returnValue = new JSONObject();
		
{{#entity.baseFields}}
		if(object.get{{{nameUcase}}}()!=null)
		{		
			returnValue.put("{{{name}}}", (object.get{{{nameUcase}}}() == null)? JSONObject.NULL : object.get{{{nameUcase}}}());
		}
{{/entity.baseFields}}
{{#entity.baseArrayFields}}
		if(object.get{{{nameUcase}}}()!=null)
		{
			returnValue.put("{{{name}}}",new JSONArray(object.get{{{nameUcase}}}()));
		}	
{{/entity.baseArrayFields}}
{{#entity.objectFields}}
		if(object.get{{{nameUcase}}}()!=null)
		{
			returnValue.put("{{{name}}}",{{{typeJavaDAO}}}.getInstance().serialize(object.get{{{nameUcase}}}()));
		}
{{/entity.objectFields}}
{{#entity.objectArrayFields}}
		if(object.get{{{nameUcase}}}()!=null)
		{
		JSONArray {{{name}}}Array = new JSONArray();
		for ({{{baseTypeSingular}}} {{{javaName}}}Object : object.get{{{nameUcase}}}()) {
			{{{name}}}Array.put({{{typeJavaDAO}}}.getInstance().serialize({{{javaName}}}Object));
		}
		returnValue.put("{{{name}}}",{{{name}}}Array);
		}
{{/entity.objectArrayFields}}

		return returnValue;
	}
}