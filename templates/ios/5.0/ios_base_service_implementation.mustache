//
//  {{{serviceName}}}.m
//  {{{projectName}}}
//  Version: {{{version}}}
//
//  Created by Mobivery
//  Copyright (c) 2012 Mobivery. All rights reserved.
//

#import "Base{{{serviceName}}}Logic.h"

#import "AFHTTPRequestOperation.h"
#import "MVYDefines.h"
#import "{{{projectName}}}Helper.h"
{{#service.hasMultipart}}
#import "AFHTTPRequestOperationManager.h"
{{/service.hasMultipart}}
{{#imports}}
#import "{{request.name}}.h"
#import "{{response.name}}.h"
#import "{{request.daoClassName}}.h"
#import "{{response.daoClassName}}.h"
#import "BaseLogic.h"
{{/imports}}


@implementation Base{{serviceName}}Logic

-(id) init
{
    self = [super init];
    if(self)
    {
        [self addFilter:[{{projectName}}Helper sharedInstance]];
    }
    return self;
}


{{#service.messages}}

/**
* Method {{method}}: {{description}}
* @param {{request.javaInstanceName}} Service request
* @returns {{response.name}} Service response
*/
- (void){{method}}:({{request.name}} *){{request.javaInstanceName}} onSuccess:(void(^)(NSInteger responseCode,{{response.name}} *response))onSuccess onError:(void(^)(NSError *error))onError {

	NSString *url=@"{{{url}}}";

	url=[self preInjectURLParameters:url  withObject:{{request.javaInstanceName}} onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];

{{#request.fields}}
	NSString *string{{nameUcase}}=[NSString stringWithFormat:@"%@",{{request.javaInstanceName}}.{{name}}];
{{/request.fields}}

{{#inURLbutNotField}}
	#ifdef {{.}}
	url = [url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{.}}"] withString:{{.}}];
	#endif
{{/inURLbutNotField}}
{{#request.fields}}    
   	if({{request.javaInstanceName}}.{{name}}==nil){
        url = [url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{name}}"] withString:@""];
	}
	else{
		if([url rangeOfString:[NSString stringWithFormat:@"${%@}",@"{{name}}"]].location != NSNotFound)
		{
		    url = [url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{name}}"] withString:string{{nameUcase}}];
		}
		{{#isGet}}
		else
		{
			// Form query strings if present (url?name1=value1&name2=value2)
			NSString *operator;
			if ([url rangeOfString:@"?"].location != NSNotFound)
			{
				operator = @"&";
			}
			else
			{
				operator = @"?";
			}
			url = [NSString stringWithFormat:@"%@%@{{serviceName}}=%@", url, operator, string{{nameUcase}}];
		}
		{{/isGet}}
	}
{{/request.fields}}

	url = [self postInjectURLParameters:url  withObject:{{request.javaInstanceName}} onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];

	_ModelGenLog(@"URL: %@", url);

	{{#isWrite}}
	NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
	// Before fields
{{#request.fields}}
    // {{name}} -- {{serviceName}}
	[dict setValue:[NSString stringWithFormat:@"%@",{{request.javaInstanceName}}.{{name}}] forKey:@"{{serviceName}}"];
{{/request.fields}}
	double time = [[NSDate date] timeIntervalSince1970];
    [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
    {{/isWrite}}
    
		url = [self escapeUrl:url  onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];
		url = [url stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];



{{#request.isMultipart}}
    // Multipart

    AFHTTPRequestOperationManager *manager = [[AFHTTPRequestOperationManager alloc] initWithBaseURL:[NSURL URLWithString:[NSURL URLWithString:url]]];

    AFHTTPRequestOperation *operation = [manager POST:[NSURL URLWithString:url] parameters:dict constructingBodyWithBlock:^(id<AFMultipartFormData> formData) {

        CFStringRef UTI = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (__bridge CFStringRef)[stringFile pathExtension], NULL);
        CFStringRef MIMEType = UTTypeCopyPreferredTagWithClass (UTI, kUTTagClassMIMEType);
        CFRelease(UTI);


        [formData appendPartWithFileData:[[NSFileManager defaultManager] contentsAtPath:stringFile] name:stringFile fileName:[stringFile lastPathComponent] mimeType:(__bridge NSString *)MIMEType];

    } success:^(AFHTTPRequestOperation *operation, id responseObject) {
        NSError *error;
        SendImageResponseDTO *dto=[self sendImageDTOFromOperation:operation withError:&error];
        onSuccess(operation.response.statusCode,dto);

    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        onError(error);
    }];


{{/request.isMultipart}}
{{^request.isMultipart}}

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:url] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:60.0];



{{#isPost}}
	NSMutableArray * content = [NSMutableArray array];
	for(NSString * key in dict) {

  		[content addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
    }
	NSString * body = [content componentsJoinedByString: @"&"];
	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
	[request setHTTPBody:bodyData];
	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
	[request setHTTPMethod:@"POST"];
{{/isPost}}
{{#isPut}}
	NSMutableArray * content = [NSMutableArray array];
	for(NSString * key in dict) {

		[content addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
    }
	NSString * body = [content componentsJoinedByString: @"&"];
	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
	[request setHTTPBody:bodyData];
	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
	[request setHTTPMethod:@"PUT"];
{{/isPut}}
{{#isDelete}}
	NSMutableArray * content = [NSMutableArray array];
	for(NSString * key in dict) {

  		[content addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
    }
	NSString * body = [content componentsJoinedByString: @"&"];
	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
	[request setHTTPBody:bodyData];
	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];
	[request setHTTPMethod:@"DELETE"];
{{/isDelete}}
{{#isPostJSON}}

    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{request.javaInstanceName}}];

    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                               options:NSJSONWritingPrettyPrinted
                                                 error:nil];

	_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);

	[request setHTTPMethod:@"POST"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
	[request setValue:[NSString stringWithFormat:@"%lu", (unsigned long)[requestData length]] forHTTPHeaderField:@"Content-Length"];
	[request setHTTPBody: requestData];

{{/isPostJSON}}
{{#isDeleteJSON}}

    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{request.javaInstanceName}}];

    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                               options:NSJSONWritingPrettyPrinted
                                                 error:nil];

	_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);

	[request setHTTPMethod:@"DELETE"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
	[request setValue:[NSString stringWithFormat:@"%lu", (unsigned long)[requestData length]] forHTTPHeaderField:@"Content-Length"];
	[request setHTTPBody: requestData];

{{/isDeleteJSON}}
{{#isPutJSON}}

    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{request.javaInstanceName}}];

    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                               options:NSJSONWritingPrettyPrinted
                                                 error:nil];

	_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);

	[request setHTTPMethod:@"PUT"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
	[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
	[request setValue:[NSString stringWithFormat:@"%lu", (unsigned long)[requestData length]] forHTTPHeaderField:@"Content-Length"];
	[request setHTTPBody: requestData];

{{/isPutJSON}}
{{#isGet}}
	NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{request.javaInstanceName}}];

        NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:nil];

    	_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);

    	[request setHTTPMethod:@"GET"];
    	NSMutableDictionary *allHeaders = [request.allHTTPHeaderFields mutableCopy];
        NSString *jsonData = [NSString stringWithFormat:@"%@", [[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]];
        [allHeaders setObject:jsonData forKey:@"data"];
        request.allHTTPHeaderFields=allHeaders;
{{/isGet}}

	request = [self manageRequest:request  onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];
	
	AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];
  	[operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation *operation, id responseObject) {

		NSError *error;
		{{response.name}} *dto=[self {{method}}DTOFromOperation:operation withError:&error];

    	if (!error) {
	        if (onSuccess) {
	            onSuccess(operation.response.statusCode,dto);
	        }      	  
	  	} else {
			if (onError) {
				onError(error);
			}    	      
		}    
		
	} failure:^(AFHTTPRequestOperation *operation, NSError *error) {

	    {{response.name}} *dto=[self {{method}}DTOFromOperation:operation withError:nil];
		if(dto)
		{
	        if (onSuccess) {
	            onSuccess(operation.response.statusCode,dto);
	        }
		}
		else if (onError) {
			onError(error);
		}
	}];
{{/request.isMultipart}}
	[operation start];
}

-({{response.name}} *) {{method}}DTOFromOperation:(AFHTTPRequestOperation *)operation withError:(NSError **)error
{
        NSData *data = operation.responseData;

			NSString *stringData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
			stringData =[self preprocessResponse:stringData  onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];
			// Create empty json object if server returned empty string
			if(!stringData){
			stringData=@"{}";
			}
			data = [stringData dataUsingEncoding:NSUTF8StringEncoding];

		NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:error];

		json=[self preprocessResponseAsDictionary:json  onService:@"{{{serviceName}}}" onMethod:@"{{{method}}}"];

        {{response.name}} *dto=nil;
         if(json)
         {
			 _ModelGenLog(@"JSON: %@", json);
            dto = [[{{response.daoClassName}} sharedInstance] readFromDictionary:json];
         }
         return dto;
}

{{/service.messages}}

@end

 